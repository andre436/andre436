import cv2

# 1. Carregar o classificador de detecção de rostos pré-treinado
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# 2. Inicializar a captura de vídeo para cada câmera de segurança
num_cameras = 25
cameras = []
for i in range(num_cameras):
    camera = cv2.VideoCapture(i)  # Abre a câmera com o índice i
    cameras.append(camera)

# 3. Loop principal para processar cada quadro de vídeo
while True:
    for i, cam in enumerate(cameras):
        # 3.1 Capturar quadro a quadro da câmera atual
        ret, frame = cam.read()
        
        # 3.2 Converter o quadro para escala de cinza
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # 3.3 Detectar rostos no quadro atual
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        # 3.4 Desenhar retângulos ao redor dos rostos detectados
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        
        # 3.5 Mostrar o quadro com os rostos detectados
        cv2.imshow(f"Câmera {i+1} - Centro 4.0 Senai", frame)
    
    # 3.6 Parar o loop ao pressionar 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 4. Liberar os objetos de captura e fechar todas as janelas
for cam in cameras:
    cam.release()
cv2.destroyAllWindows()
